---
import ToggleTheme from '@components/ui/ToggleTheme.astro';
import { Icon } from 'astro-icon/components';

const menuitems = [
	{
		title: 'Home',
		path: '#home',
		icon: 'home-account',
	},
	{
		title: 'About',
		path: '#about',
		icon: 'about-circle-outline',
	},
	{
		title: 'Projects',
		path: '#projects',
		icon: 'work-outline',
	},
	{
		title: 'Tech Stack',
		path: '#tech',
		icon: 'protected-outline',
	},
	{
		title: 'Contact',
		path: '#contact',
		icon: 'contact-outline',
	},
];
const { nav, page=-1 } = Astro.props;
---

<header
	id={nav + '-nav'}
	data-testId="header"
	class="flex w-full flex-row items-center justify-between bg-white py-2 dark:bg-black fixed bottom-0 z-40  md:bottom-auto md:top-0"
>
	<div class={`grow hidden md:block`}></div>
	<ul class="grow md:grow-0 mx-2 flex flex-row gap-3 justify-between">
		{
			menuitems.map((item,index) => {
			const addClass =  page == index ?'text-orange dark:text-orange' : '';
			return	<>
					<li>
						<a
							aria-label="navigation link"
							href={'/' + item.path}
							class={`flex py-2  md:hover:text-orange md:dark:hover:text-orange xs:px-3 ${addClass}`}
						>
							
							 <Icon class='md:hidden' name={`mdi:${item.icon}`} size={36} /> 
							<span class="hidden md:block">{item.title}</span>
						</a>
					</li>
				</>
			})
		}
		<li class="grid"><ToggleTheme id={nav} size={  36} /></li>
	</ul>
	{page == -1 &&
		<script define:vars={{ nav }}>
			document.addEventListener('DOMContentLoaded', () => {
				let preActiveLink = null;
				const links = document.querySelectorAll(`#${nav}-nav a[aria-label="navigation link"]`);
				
				const toggleClass = (found, isTrue) => {
					found.classList.toggle('font-extrabold', isTrue);
					found.classList.toggle('text-orange', isTrue);
					found.classList.toggle('md:text-black', isTrue);
					found.classList.toggle('md:dark:text-orange', isTrue);
				};
				const updateActiveLink = () => {
					const sections = Array.from(links).map((link) =>
						document.querySelector(link.getAttribute('href').replace('/', ''))
					);
					let activeLink = null;
					sections.forEach((section, index) => {
						const rect = section.getBoundingClientRect();
						if (rect.top <= window.innerHeight / 2 && rect.bottom >= window.innerHeight / 2) {
							activeLink = links[index].href;
						}
					});

					let found;
					for (let i = 0; i < links.length; i++) {
						if (links[i].href === activeLink) {
							found = links[i];
							break; // Exit the loop once the active link is found
						}
					}
					if (!found || preActiveLink?.href === found?.href) return;

					history.replaceState(null, null, activeLink);
					toggleClass(found, true);
					if (preActiveLink && preActiveLink !== found) {
						toggleClass(preActiveLink, false);
					}
					preActiveLink = found;
				};

				window.addEventListener('scroll', updateActiveLink);
				setTimeout(updateActiveLink, 2000);
			});
		</script>}
				<slot name="subheader"  />
</header>

